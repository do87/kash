#!/usr/bin/env bash

usage() {
  cat <<"EOF"
USAGE:
  kash                   : list available pods in namespace
  kash <POD>             : enter container or list containers if more than 1
  kush <POD> <CONTAINER> : enter container

FLAGS:
  -h,--help              : help
EOF
  exit 1
}

exec_command() {
  EXEC_SHELL=sh
  echo "Entering container ${2} in pod ${1}..."
  if (kubectl exec "${1}" -c "${2}" which bash)>/dev/null 2>&1; then
    EXEC_SHELL=bash
  fi
  kubectl exec -it "${1}" -c "${2}" $EXEC_SHELL
}

handle_containers() {
  containers=$(kubectl get po "${1}" -o=jsonpath='{range .spec.containers[*]}{.name}{"\n"}{end}');
  if [[ "$2" == "" ]]; then
    filtered="${containers}"
  else
    filtered=$(echo "${containers}" | grep "${2}")
  fi

  count=$(echo "${filtered}" | wc -l)
  if [[ "$filtered" == "" ]]; then
    echo "Pod ${1} has no containers";
  elif [[ $count -eq 1 ]]; then
    exec_command "${1}" "${filtered}"
  else
    echo "Choose a container:"
    echo "$filtered"
    selected=$( echo "${filtered}" | fzf -0 -1 --tac -q "${args[1]:-""}" --prompt "> " );
    if [[ "$selected" == "" ]]; then
      exit 1
    fi
    exec_command "${1}" "${selected}"
  fi
}

handle_pods() {
  pods=$(kubectl get po -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' --field-selector=status.phase=Running);
  filtered="";
  if [[ "$1" == "" ]]; then
    selected=$( echo "${pods}" | fzf -0 -1 --tac -q "${args[1]:-""}" --prompt "> " );
    if [[ "$selected" == "" ]]; then
      exit 1
    fi
    handle_pods "${selected}"
  else
    filtered=$(echo "${pods}" | grep "${1}")
    count=$(echo "${filtered}" | wc -l)
    if [[ "$filtered" == "" ]]; then
      echo "No matching pods found;Run kash without arguments to view all available pods;" | tr ';' '\n'
    elif [[ $count -eq 1 ]]; then
      echo "Pod ${filtered} Selected"
      if [[ "$2" == "" ]]; then
        handle_containers "${filtered}"
      else
        handle_containers "${filtered}" "$2"
      fi
    else
      selected=$( echo "${filtered}" | fzf -0 -1 --tac -q "${1:-""}" --prompt "> ");
      if [[ "$selected" == "" ]]; then
        exit 1
      fi
      handle_pods "${selected}"
    fi

  fi
}

requirements() {
  if [ ! -x "$(which kubectl 2>/dev/null)" ]; then
    echo "kubectl is required and couldn't be found;please refer to https://kubernetes.io/docs/tasks/kubectl/install" | tr ';' '\n' >&2
    exit 1
  fi
  if [ ! -x "$(which fzf 2>/dev/null)" ]; then
    echo "fzf is required and couldn't be found;Please refer to https://github.com/junegunn/fzf" | tr ';' '\n' >&2
    exit 1
  fi
}

main() {
  requirements

  if [[ "$#" -eq 0 ]]; then
    handle_pods
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    elif [[ "${1}" =~ ^-(.*) ]]; then
      echo "error: unrecognized flag \"${1}\"" >&2
      usage
    else
      handle_pods "${1}" ""
    fi
  elif [[ "$#" -eq 2 ]]; then
    handle_pods "${1}" "${2}"
  else
    echo "error: bad format used" >&2
    usage
  fi
}

main "$@"
